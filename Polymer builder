import random

# Define the monomers and their reactivity ratios
monomers = ['A', 'B']
reactivity_ratios = {'A': 2.6, 'B': 0.39}

# Define the molar ratios
molar_ratios = {'A': 0.45, 'B': 0.55}

# Define the length of the chain
chain_length = 500

# Run the Monte Carlo simulation 1000 times
for i in range(1000):
    # Initialize the chain with the first monomer
    chain = [random.choices(monomers, weights=[molar_ratios[monomer] for monomer in monomers])[0]]
    
    # Add monomers to the chain
    for j in range(chain_length - 1):
        last_mon = chain[-1]
        
        # Calculate the probabilities of adding each monomer
        prob_A = (molar_ratios['A'] * reactivity_ratios[last_mon]) / (molar_ratios['A'] * reactivity_ratios['A'] + molar_ratios['B'] * reactivity_ratios[last_mon])
        prob_B = 1 - prob_A
        
        # Choose the next monomer based on the probabilities
        next_mon = random.choices(monomers, weights=[prob_A, prob_B])[0]
        
        # Add the next monomer to the chain
        chain.append(next_mon)
    
    # Print the chain sequence
    print(f'Chain sequence {i+1}: {"-".join(chain)}')
